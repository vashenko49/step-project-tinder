{"version":3,"sources":["reducers/User/User.js","config/Notistack.js","reducers/Notistack/Notistack.js","config/System.js","reducers/System/System.js","reducers/Slide/Slide.js","reducers/Messenger/Messenger.js","reducers/rootReducer.js","config/User.js","config/Slide.js","config/Messenger.js","store/index.js","actions/System/System.js","service/Slide.js","actions/Slide/Slide.js","actions/Messenger/Messenger.js","components/SlidePartner/SlidePartner.js","components/Chat/Chat.js","components/ListChats/ListChates.js","components/Messenger/Messenger.js","components/ListMatches/ListMatches.js","components/StyledLink/StyledLink.js","components/HomePage/HomePage.js","components/ErrorPage/ErrorPage.js","util/Oauth.js","service/User.js","actions/User/User.js","components/SingIn/SingIn.js","components/SingUp/SingUp.js","components/Routing/PrivateRoute/PrivateRoute.js","components/PersonalCabinet/PersonalCabinet.js","components/Routing/Routing.js","components/Header/Header.js","components/Notifier/Notifier.js","actions/Notistack/Notistack.js","components/Loader/Loader.js","index.js"],"names":["initialState","isAuthorization","unReadMessage","first_name","age","interests","gender","genderpartner","aboutMe","max_distance","min_age","max_age","imagesList","userId","ENQUEUE_SNACKBAR","defaultState","notifications","STOP_LOAD","load","users","currentSlide","matches","error","errorMessage","connected","connecting","chats","messages","activeChat","receiver","page","combineReducers","User","state","action","type","payload","Notistack","key","notification","map","dismissAll","dismissed","filter","System","SYSTEM","Slide","user","Messenger","payloadSocket","JSON","parse","message","userChats","_","sumBy","o","number_unread","concat","reduxWebsocketMiddleware","reduxWebsocket","logger","createLogger","startLoad","SlideAPI","getPackAccountForUser","axios","get","withCredentials","then","res","data","slidePartner","post","getUserMatch","nextSlide","currentUsers","result","dispatch","a","partner","NOTISTACK","length","catch","finally","setReceiver","startNewChat","useStyles","makeStyles","theme","root","height","notFound","display","justifyContent","flexDirection","alignItems","notFoundIcon","fontSize","avatarPartner","width","minHeight","objectFit","card","cardContent","marginTop","overflow","wordWrap","backgroundColor","outline","buttons","connect","bindActionCreators","SlideAction","MessengerAction","classes","onSlide","className","Typography","variant","Card","CardMedia","component","Image","publicId","img_url","CardContent","gutterBottom","isString","color","CardActions","IconButton","onClick","aria-label","label","padding","boxSizing","messageList","send","MessageAction","inputMes","useRef","useState","setMessage","sendMessage","from_id","chat_id","tou_id","chatId","text","current","clear","lockable","onScroll","e","target","scrollTop","dataSource","c","message_id","time_send","message_text","position","date","Date","ref","placeholder","multiline","value","rightButtons","onKeyPress","onChange","inputStyle","border","borderRadius","margin","field","img","cloudinary","Cloudinary","cloud_name","url","name","id","statusColor","avatar","alt","title","subtitle","unread","chatID","breakpoints","down","columnClassName","paddingLeft","emptyList","partnerAvatar","partnerCard","breakpointColumnsObj","default","1100","700","500","goToMessage","breakpointCols","u","console","log","StyledLink","styled","Link","props","blockWithMessengerAndListMatches","bottomNavigation","rootIsNotAuthorization","mainIcon","SystemAction","React","setValue","Grid","container","item","xl","lg","md","sm","xs","BottomNavigation","event","newValue","BottomNavigationAction","icon","Badge","badgeContent","Container","to","urlParams","URLSearchParams","window","location","search","ErrorPage","Button","Oauth","validateEmail","emailVal","test","String","toLowerCase","removeCookies","multiple","document","cookie","split","i","ServiceUserAPI","getUserDataBYJWT","signUpUser","signInUser","put","editUserData","changePassword","changeImgUser","getUserDataByJWT","oauth","Cookie","redirect","jwt","response","SignOut","disconnect","editData","changeImg","maxWidth","googleButton","textDecoration","formSingIn","formControl","UserAction","history","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","showPassword","setShowPassword","align","fullWidth","href","onSubmit","preventDefault","validEmail","validPassword","formData","objectToFormData","indices","nullsAsUndefineds","push","formSingUp","noValidate","autoComplete","FormControl","InputLabel","htmlFor","Input","aria-describedby","FormHelperText","endAdornment","InputAdornment","onMouseDown","Visibility","VisibilityOff","setName","nameError","setNameError","pictures","setPictures","errorPictures","setErrorPictures","validName","validPicture","firstName","withPreview","withIcon","buttonText","fileSizeError","fileTypeError","pictureFiles","imgExtension","maxFileSize","singleImage","Component","rest","render","userAvatar","newFirstName","setNewFirstName","isNull","newAge","setNewAge","newInterests","setNewInterests","newGander","setNewGander","newGanderPartner","setNewGanderPartner","newAboutMe","setNewAboutMe","newMaxDistance","setNewMaxDistance","newMinAge","setNewMinAge","newMaxAge","setNewMaxAge","useEffect","newPassword","setNewPassword","newPasswordError","setNewPasswordError","showNewPassword","setShowNewPassword","handleMouseDownPassword","aboutme","spacing","TextField","FormLabel","RadioGroup","FormControlLabel","control","Radio","Slider","aria-labelledby","valueLabelDisplay","min","max","currentPassword","Routing","exact","path","HomePage","SingIn","SingUp","PersonalCabinet","ListMatches","grow","flexGrow","heightBar","menuButton","marginRight","sectionDesktop","up","sectionMobile","mainLink","signOut","marginLeft","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMobileMenuOpen","Boolean","renderMobileMenu","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","aria-controls","aria-haspopup","Avatar","AppBar","Toolbar","src","noWrap","edge","style","currentTarget","displayed","Notifier","useDispatch","useSelector","store","useSnackbar","enqueueSnackbar","closeSnackbar","forEach","options","includes","reason","myKey","onExited","removeSnackbar","Backdrop","backDrop","CircularProgress","outerTheme","createMuiTheme","palette","secondary","pink","primary","ReactDOM","ThemeProvider","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","cloudName","getElementById"],"mappings":"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","file":"static/js/main.eea81c56.chunk.js","sourcesContent":["import * as USER from '../../config/User'\r\n\r\nexport const initialState = {\r\n    isAuthorization: false,\r\n    unReadMessage: 0,\r\n    first_name: \"\",\r\n    age: 18,\r\n    interests: \"\",\r\n    gender: \"\",\r\n    genderpartner: '',\r\n    aboutMe: \"\",\r\n    max_distance: 10,\r\n    min_age: 18,\r\n    max_age: 22,\r\n    imagesList: [],\r\n    userId:\"\"\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    const {type, payload} = action;\r\n    switch (type) {\r\n        case USER.LOG_IN_REQUEST:\r\n            return {\r\n                ...state,\r\n                isAuthorization: true\r\n            }\r\n        case USER.GET_USER_DATA_BY_JWT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthorization: true,\r\n                first_name: payload.first_name,\r\n                age: payload.age,\r\n                interests: payload.interests,\r\n                gender: payload.gender,\r\n                genderpartner: payload.genderpartner,\r\n                aboutMe: payload.aboutMe,\r\n                max_distance: payload.max_distance,\r\n                min_age: payload.min_age,\r\n                max_age: payload.max_age,\r\n                imagesList: payload.imagesList,\r\n                userId: payload.userId,\r\n            }\r\n        case USER.EDIT_USER_DATA:\r\n            return {\r\n                ...state,\r\n                isAuthorization: true,\r\n                first_name: payload.first_name,\r\n                age: payload.age,\r\n                interests: payload.interests,\r\n                gender: payload.gender,\r\n                genderpartner: payload.genderpartner,\r\n                aboutMe: payload.aboutMe,\r\n                max_distance: payload.max_distance,\r\n                min_age: payload.min_age,\r\n                max_age: payload.max_age,\r\n            }\r\n        case USER.GET_USER_DATA_BY_JET_FAILED:\r\n        case USER.SIGN_OUT:\r\n            return initialState\r\n        default:\r\n            return state\r\n    }\r\n}","export const ENQUEUE_SNACKBAR = 'ENQUEUE_SNACKBAR';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const REMOVE_SNACKBAR = 'REMOVE_SNACKBAR';","import { ENQUEUE_SNACKBAR, CLOSE_SNACKBAR, REMOVE_SNACKBAR } from '../../config/Notistack';\r\n\r\nconst defaultState = {\r\n    notifications: []\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case ENQUEUE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: [\r\n                    ...state.notifications,\r\n                    {\r\n                        key: action.key,\r\n                        ...action.notification\r\n                    }\r\n                ]\r\n            };\r\n\r\n        case CLOSE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.map(notification =>\r\n                    action.dismissAll || notification.key === action.key\r\n                        ? { ...notification, dismissed: true }\r\n                        : { ...notification }\r\n                )\r\n            };\r\n\r\n        case REMOVE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.filter(notification => notification.key !== action.key)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","export const START_LOAD = \"START_LOAD\";\r\nexport const STOP_LOAD = \"STOP_LOAD\";","import * as SYSTEM from '../../config/System'\r\n\r\nexport const initialState = {\r\n    load: false,\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SYSTEM.START_LOAD:\r\n            return {\r\n                ...state,\r\n                load: true\r\n            }\r\n        case SYSTEM.STOP_LOAD:\r\n            return {\r\n                ...state,\r\n                load: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import * as SLIDE from '../../config/Slide'\r\n\r\nexport const initialState = {\r\n    users: [],\r\n    currentSlide: 0,\r\n    matches: []\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                users: action.payload.user,\r\n                currentSlide: 0\r\n            }\r\n        case SLIDE.NEXT_SLIDE:\r\n            return {\r\n                ...state,\r\n                currentSlide: action.payload\r\n            }\r\n        case SLIDE.LOAD_MATCHES:\r\n            return {\r\n                ...state,\r\n                matches: action.payload\r\n            }\r\n        case SLIDE.LOAD_USERS_FOR_LIKE_FAILED:\r\n        case SLIDE.SIGN_OUT:\r\n            return initialState\r\n        default:\r\n            return state\r\n    }\r\n}","import * as MESSENGER from '../../config/Messenger'\r\nimport _ from 'lodash';\r\n\r\nexport const initialState = {\r\n    error: false,\r\n    errorMessage: \"\",\r\n    connected: false,\r\n    connecting: false,\r\n    unReadMessage: 0,\r\n    chats: [],\r\n    messages: [],\r\n    activeChat: \"\",\r\n    receiver: \"\",\r\n    page: 0\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"REDUX_WEBSOCKET::OPEN\":\r\n            return {\r\n                ...state,\r\n                error: false,\r\n                errorMessage: \"\",\r\n                connecting: false,\r\n                connected: true\r\n            }\r\n        case \"REDUX_WEBSOCKET::CONNECT\":\r\n            return {\r\n                ...state,\r\n                connected: true,\r\n                connecting: true\r\n            }\r\n        case \"REDUX_WEBSOCKET::MESSAGE\":\r\n\r\n            const payloadSocket = JSON.parse(action.payload.message);\r\n\r\n            const {type} = payloadSocket;\r\n            switch (type) {\r\n                case MESSENGER.GET_INIT_INFORMATION: {\r\n                    const {userChats, messages, activeChat} = payloadSocket\r\n                    return {\r\n                        ...state,\r\n                        chats: userChats,\r\n                        messages: messages,\r\n                        activeChat: activeChat,\r\n                        unReadMessage: _.sumBy(userChats, o => o.number_unread)\r\n                    }\r\n                }\r\n                case MESSENGER.RECEIVE_NEW_INFO_CHAT: {\r\n                    const {userChats} = payloadSocket;\r\n                    return {\r\n                        ...state,\r\n                        chats: userChats,\r\n                        unReadMessage: _.sumBy(userChats, o => o.number_unread)\r\n                    }\r\n                }\r\n                case MESSENGER.RECEIVE_NEW_MESSAGES_IN_ACTIVE_CHAT: {\r\n                    const {activeChat, messages, page} = payloadSocket;\r\n\r\n                    if (page === 0) {\r\n                        return {\r\n                            ...state,\r\n                            messages: messages,\r\n                            activeChat: activeChat,\r\n                            page: page,\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...state,\r\n                            activeChat: activeChat,\r\n                            page: page,\r\n                            messages: messages.concat(state.messages)\r\n                        }\r\n                    }\r\n                }\r\n                case MESSENGER.ERROR_ON_SERVER:\r\n                case MESSENGER.ERROR_TYPE: {\r\n                    const {message} = payloadSocket;\r\n                    return {\r\n                        ...state,\r\n                        error: true,\r\n                        errorMessage: message\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case \"REDUX_WEBSOCKET::CLOSED\": {\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                errorMessage: \"DISCONNECT\"\r\n            }\r\n        }\r\n        case MESSENGER.SET_RECEIVER:\r\n            return {\r\n                ...state,\r\n                receiver: action.payload\r\n            }\r\n        case MESSENGER.SET_ACTIVE_CHAT:\r\n            return {\r\n                ...state,\r\n                activeChat: action.payload\r\n            }\r\n        case MESSENGER.START_NEW_CHAT:\r\n            return {\r\n                ...state,\r\n                activeChat: \"\",\r\n                messages: [],\r\n                receiver: action.payload,\r\n                page: 0\r\n            }\r\n        case MESSENGER.CHAT_SIGN_OUT:\r\n            return initialState\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport User from './User/User';\r\nimport Notistack from './Notistack/Notistack';\r\nimport System from './System/System';\r\nimport Slide from './Slide/Slide';\r\nimport Messenger from './Messenger/Messenger';\r\n\r\nexport default combineReducers({\r\n    User,\r\n    Notistack,\r\n    System,\r\n    Slide,\r\n    Messenger\r\n});","export const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\n\r\nexport const GET_USER_DATA_BY_JWT_SUCCESS = \"GET_USER_DATA_BY_JWT_SUCCESS\";\r\nexport const GET_USER_DATA_BY_JET_FAILED = \"GET_USER_DATA_BY_JET_FAILED\";\r\n\r\nexport const EDIT_USER_DATA = \"EDIT_USER_DATA\";\r\n\r\nexport const SIGN_OUT = \"SIGN_OUT\";","export const LOAD_USERS_FOR_LIKE_SUCCESS = \"LOAD_USERS_FOR_LIKE_SUCCESS\";\r\nexport const LOAD_USERS_FOR_LIKE_FAILED = \"LOAD_USERS_FOR_LIKE_FAILED\";\r\n\r\nexport const NEXT_SLIDE = \"NEXT_SLIDE\";\r\n\r\nexport const LOAD_MATCHES = \"LOAD_MATCHES\";\r\n\r\nexport const SIGN_OUT = \"SIGN_OUT\";","export const SET_ACTIVE_CHAT = \"SET_ACTIVE_CHAT\";\r\n\r\nexport const GET_INIT_INFORMATION = \"GET_INIT_INFORMATION\";\r\nexport const GET_MESSAGES_FOR_ACTIVE_CHAT = \"GET_MESSAGES_FOR_ACTIVE_CHAT\";\r\n\r\nexport const RECEIVE_NEW_INFO_CHAT = \"RECEIVE_NEW_INFO_CHAT\";\r\nexport const RECEIVE_NEW_MESSAGES_IN_ACTIVE_CHAT = \"RECEIVE_NEW_MESSAGES_IN_ACTIVE_CHAT\";\r\n\r\nexport const CHAT_SIGN_OUT = \"CHAT_SIGN_OUT\";\r\n\r\n\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const DROP_MESSAGE = \"DROP_MESSAGE\";\r\nexport const DROP_CHAT = \"DROP_CHAT\";\r\nexport const MAKE_READ_CHAT = \"MAKE_READ_CHAT\";\r\n\r\nexport const ERROR_ON_SERVER = \"ERROR_ON_SERVER\";\r\nexport const ERROR_TYPE = \"ERROR_TYPE\";\r\n\r\nexport const SET_RECEIVER = \"SET_RECEIVER\";\r\n\r\nexport const START_NEW_CHAT = \"START_NEW_CHAT\";","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/rootReducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport reduxWebsocket from '@giantmachines/redux-websocket';\r\nimport {createLogger} from 'redux-logger';\r\n\r\nconst reduxWebsocketMiddleware = reduxWebsocket();\r\n\r\nconst logger = createLogger();\r\nexport default function configureStore() {\r\n    return createStore(rootReducer, {}, composeWithDevTools(applyMiddleware(logger, thunk, reduxWebsocketMiddleware)));\r\n}","import * as SYSTEM from '../../config/System';\r\n\r\n\r\nexport const startLoad = () => ({\r\n    type: SYSTEM.START_LOAD,\r\n});\r\n\r\nexport const stopLoad = () => ({\r\n    type: SYSTEM.STOP_LOAD,\r\n});","import axios from 'axios';\r\n\r\nexport default class SlideAPI {\r\n    static getPackAccountForUser = () => axios.get(\"/api/v0/liked\", {withCredentials: true}).then(res => res.data);\r\n    static slidePartner = data => axios.post(\"/api/v0/liked\", data, {withCredentials: true}).then(res => res.data);\r\n    static getUserMatch = () => axios.get(\"/api/v0/match\", {withCredentials: true}).then(res => res.data);\r\n}","import * as SYSTEM from '../../config/System';\r\nimport * as SLIDE from \"../../config/Slide\";\r\nimport * as NOTISTACK from \"../../config/Notistack\";\r\nimport SlideAPI from \"../../service/Slide\";\r\n\r\nexport const nextSlide = (currentSlide, currentUsers, result) => async dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    })\r\n\r\n    const isMatch = await SlideAPI.slidePartner({\r\n        partner: currentUsers[currentSlide].userId,\r\n        result: result\r\n    })\r\n\r\n\r\n    if (isMatch.result) {\r\n        SlideAPI.getUserMatch()\r\n            .then(res => {\r\n                dispatch({\r\n                    type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                    notification: {\r\n                        ...{\r\n                            message: \"You have new match\"\r\n                        }\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: SLIDE.LOAD_MATCHES,\r\n                    payload: res\r\n                })\r\n            })\r\n\r\n\r\n    }\r\n\r\n    if (currentSlide + 2 > currentUsers.length) {\r\n        SlideAPI.getPackAccountForUser()\r\n            .then(res => {\r\n                dispatch({\r\n                    type: SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS,\r\n                    payload: {\r\n                        user: res,\r\n                        currentSlide: 0\r\n                    }\r\n                })\r\n            })\r\n            .catch(res => {\r\n                dispatch({\r\n                    type: SLIDE.LOAD_USERS_FOR_LIKE_FAILED\r\n                })\r\n            })\r\n            .finally(() => {\r\n                dispatch({\r\n                    type: SYSTEM.STOP_LOAD\r\n                })\r\n            })\r\n    } else {\r\n        dispatch({\r\n            type: SLIDE.NEXT_SLIDE,\r\n            payload: currentSlide + 1\r\n        });\r\n        dispatch({\r\n            type: SYSTEM.STOP_LOAD\r\n        })\r\n    }\r\n\r\n}\r\n","import * as MESSENGER from '../../config/Messenger';\r\n\r\nexport const setReceiver = data => {\r\n    return {\r\n        type: MESSENGER.SET_ACTIVE_CHAT,\r\n        payload: data\r\n    };\r\n}\r\n\r\nexport const startNewChat = data => {\r\n    return {\r\n        type: MESSENGER.START_NEW_CHAT,\r\n        payload: data\r\n    }\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as SlideAction from \"../../actions/Slide/Slide\";\r\nimport * as MessengerAction from \"../../actions/Messenger/Messenger\";\r\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\r\nimport _ from 'lodash';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Image} from \"cloudinary-react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"100%\"\r\n    },\r\n    notFound: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    notFoundIcon: {\r\n        fontSize: \"18rem\"\r\n    },\r\n    avatarPartner: {\r\n        width: \"100%\",\r\n        minHeight: \"150px\",\r\n        height: \"55vh\",\r\n        objectFit: \"cover\"\r\n    },\r\n    card: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    cardContent: {\r\n        marginTop: \"6x\",\r\n        height: \"22vh\",\r\n        overflow: \"auto\",\r\n        wordWrap:\"break-word\",\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,.1)',\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    buttons: {\r\n        height: \"5vh%\",\r\n        display: \"flex\",\r\n        justifyContent: 'space-around'\r\n    }\r\n}));\r\nconst SlidePartner = ({Slide: {users, currentSlide}, nextSlide, startNewChat}) => {\r\n    const classes = useStyles();\r\n\r\n    const onSlide = result => {\r\n        nextSlide(currentSlide, users, result);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            {\r\n                users.length === 0 || currentSlide + 1 > users.length ? (<div className={classes.notFound}>\r\n                    <WatchLaterIcon className={classes.notFoundIcon}/>\r\n                    <Typography variant=\"h6\">\r\n                        No one found. Check back later\r\n                    </Typography>\r\n                </div>) : (\r\n                    <Card className={classes.card}>\r\n                        <div>\r\n                            <CardMedia\r\n                                className={classes.avatarPartner}\r\n                                component={Image}\r\n                                publicId={users[currentSlide].img_url}\r\n                            />\r\n                            <CardContent className={classes.cardContent}>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                    {users[currentSlide].first_name + \", \" + users[currentSlide].age}\r\n                                </Typography>\r\n                                {\r\n                                    _.isString(users[currentSlide].interests) && users[currentSlide].interests.length > 0 && _.isString(users[currentSlide].aboutMe) && users[currentSlide].aboutMe.length > 0 ? (<>\r\n                                        {\r\n                                            _.isString(users[currentSlide].interests) && users[currentSlide].interests.length > 0 && (\r\n                                                <>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\"\r\n                                                                component=\"p\">\r\n                                                        Interests\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                                                        {users[currentSlide].interests}\r\n                                                    </Typography>\r\n                                                </>\r\n                                            )\r\n\r\n                                        }\r\n                                        {\r\n                                            _.isString(users[currentSlide].aboutMe) && users[currentSlide].aboutMe.length > 0 && (\r\n                                                <>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\"\r\n                                                                component=\"p\">\r\n                                                        About Me\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                                                        {users[currentSlide].aboutMe}\r\n                                                    </Typography>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    </>) : (<>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                            No data\r\n                                        </Typography>\r\n                                    </>)\r\n                                }\r\n                            </CardContent>\r\n                        </div>\r\n                        <CardActions className={classes.buttons}>\r\n                            <IconButton onClick={() => {\r\n                                onSlide(false)\r\n                            }} aria-label={\"Dislike\"}>\r\n                                <ThumbDownIcon fontSize={\"large\"}/>\r\n                            </IconButton>\r\n                            <IconButton onClick={()=>{\r\n                                startNewChat(users[currentSlide].userId)\r\n                            }} aria-label={\"Message\"}>\r\n                                <MessageIcon fontSize={\"large\"}/>\r\n                            </IconButton>\r\n                            <IconButton onClick={() => {\r\n                                onSlide(true)\r\n                            }} label={\"Like\"}>\r\n                                <ThumbUpIcon fontSize={\"large\"}/>\r\n                            </IconButton>\r\n                        </CardActions>\r\n                    </Card>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {Slide: state.Slide};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        nextSlide: bindActionCreators(SlideAction.nextSlide, dispatch),\r\n        startNewChat: bindActionCreators(MessengerAction.startNewChat, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SlidePartner);","import React, {useState, useRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {MessageList, Input, Button} from 'react-chat-elements'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport * as MESSAGE from '../../config/Messenger';\r\nimport {bindActionCreators} from \"redux\";\r\nimport {send} from \"@giantmachines/redux-websocket/dist\";\r\nimport * as MessageAction from \"../../actions/Messenger/Messenger\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"60%\",\r\n        padding: \"0 10px 0 10px\",\r\n        boxSizing: \"border-box\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"flex-end\"\r\n    },\r\n    messageList: {\r\n        overflow: \"auto\",\r\n    }\r\n}));\r\n\r\nconst Chat = ({Messenger: {messages, receiver, page, activeChat}, User: {userId}, send}) => {\r\n    const classes = useStyles();\r\n\r\n    const inputMes = useRef(\"\");\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const sendMessage = () => {\r\n\r\n        if (messages.length > 0) {\r\n            const {from_id, chat_id, tou_id} = messages[0];\r\n            send({\r\n                type: MESSAGE.SEND_MESSAGE,\r\n                receiver: from_id === userId ? tou_id : from_id,\r\n                chatId: chat_id,\r\n                text: message\r\n            })\r\n        } else {\r\n            send({\r\n                type: MESSAGE.SEND_MESSAGE,\r\n                receiver: receiver,\r\n                text: message\r\n            })\r\n        }\r\n\r\n        setMessage(\"\");\r\n        inputMes.current.clear();\r\n    };\r\n\r\n    const scrollChat = e => {\r\n        if (e.target.scrollTop === 0) {\r\n            send({\r\n                type: MESSAGE.GET_MESSAGES_FOR_ACTIVE_CHAT,\r\n                activeChat: activeChat,\r\n                page: page + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <MessageList\r\n                className={classes.messageList}\r\n                lockable={true}\r\n                onScroll={scrollChat}\r\n                dataSource={messages.map(c => {\r\n                    const {message_id, time_send, from_id, message_text} = c;\r\n                    return {\r\n                        message_id: message_id,\r\n                        position: from_id === userId ? \"right\" : \"left\",\r\n                        type: \"text\",\r\n                        text: message_text,\r\n                        date: new Date(time_send),\r\n                    }\r\n\r\n                })}\r\n            />\r\n            <div className=\"send-messages-input\">\r\n                <Input\r\n                    ref={inputMes}\r\n                    placeholder=\"Type here...\"\r\n                    multiline={false}\r\n                    value={message}\r\n                    rightButtons={\r\n                        <>\r\n                            <Button\r\n                                color=\"white\"\r\n                                backgroundColor=\"black\"\r\n                                text=\"SEND\"\r\n                                onClick={sendMessage}\r\n                            />\r\n                        </>\r\n                    }\r\n                    onKeyPress={e => {\r\n                        if (e.key === \"Enter\") {\r\n                            sendMessage();\r\n                        }\r\n                    }}\r\n                    onChange={e => setMessage(e.target.value)}\r\n                    inputStyle={{\r\n                        border: \"2px solid #dedede\",\r\n                        backgroundColor: \"#f1f1f1\",\r\n                        borderRadius: \"5px\",\r\n                        padding: \"10px\",\r\n                        margin: \"10px 0\"\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Messenger: state.Messenger,\r\n        User: state.User,\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        send: bindActionCreators(send, dispatch),\r\n        setReceiver: bindActionCreators(MessageAction.setReceiver, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n","import React from 'react';\r\nimport {ChatItem} from 'react-chat-elements'\r\nimport {connect} from \"react-redux\";\r\nimport cloudinary from 'cloudinary-core';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {send} from '@giantmachines/redux-websocket';\r\nimport * as MESSAGE from '../../config/Messenger';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        overflow: \"auto\",\r\n        boxSizing: \"border-box\",\r\n        width: \"40%\",\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,.1)',\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    activeChat: {\r\n        backgroundColor: \"black\",\r\n\r\n    }\r\n}));\r\nconst ListChats = ({Messenger: {chats, activeChat}, User: {userId}, send}) => {\r\n    const classes = useStyles();\r\n\r\n    const onClick = (chat_id, receiver, number_unread) => {\r\n        send({\r\n            type: MESSAGE.GET_MESSAGES_FOR_ACTIVE_CHAT,\r\n            activeChat: chat_id,\r\n            page: 0\r\n        })\r\n        if (number_unread > 0) {\r\n            send({\r\n                type: MESSAGE.MAKE_READ_CHAT,\r\n                chatID: chat_id,\r\n                receiver: receiver\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n\r\n            {\r\n                chats.map(c => {\r\n                    const {from_id, tou_id, number_unread, time_send, message_text, chat_id} = c;\r\n                    let field = from_id === userId ? \"from\" : \"tou\";\r\n\r\n                    const img = new cloudinary.Cloudinary({\r\n                        cloud_name: \"dxge5r7h2\"\r\n                    }).url(c[`${field}_img_url`])\r\n\r\n                    let name = c[`${field}_name`]\r\n\r\n                    let id = from_id === userId ? tou_id : false;\r\n\r\n                    return <ChatItem\r\n                        statusColor={activeChat === chat_id ? \"#eb3434\" : \"\"}\r\n                        key={chat_id}\r\n                        avatar={img}\r\n                        alt={name}\r\n                        title={name}\r\n                        subtitle={message_text}\r\n                        date={new Date(time_send)}\r\n                        unread={number_unread}\r\n                        onClick={() => {\r\n                            onClick(chat_id, id, number_unread)\r\n                        }}\r\n                    />\r\n                })\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Messenger: state.Messenger,\r\n        User: state.User\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        send: bindActionCreators(send, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListChats);\r\n","import React from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Chat from \"../Chat/Chat\";\r\nimport ListChats from \"../ListChats/ListChates\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"85vh\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '92vh',\r\n        },\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        flexWrap: \"nowrap\"\r\n    }\r\n}));\r\nconst Messenger = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListChats/>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Messenger;","import React from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {connect} from \"react-redux\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport {Image} from \"cloudinary-react\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MessageIcon from \"@material-ui/icons/Message\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as MessengerAction from \"../../actions/Messenger/Messenger\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"85vh\",\r\n        overflow: \"auto\",\r\n        padding: \"12px\",\r\n        boxSizing: \"border-box\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '100vh',\r\n        },\r\n        display: \"flex\",\r\n        width: \"auto\",\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,.1)',\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    columnClassName: {\r\n        paddingLeft: \"12px\",\r\n        boxSizing: \"border-box\"\r\n    },\r\n    emptyList: {\r\n        height: \"85vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    notFoundIcon: {\r\n        fontSize: \"18rem\"\r\n    },\r\n    partnerAvatar: {\r\n        width: \"100%\",\r\n    },\r\n    partnerCard: {\r\n        margin: \"12px 0\"\r\n    },\r\n    buttons: {\r\n        display: \"flex\",\r\n        justifyContent: 'space-around'\r\n    }\r\n}));\r\n\r\nconst breakpointColumnsObj = {\r\n    default: 3,\r\n    1100: 2,\r\n    700: 2,\r\n    500: 1\r\n};\r\n\r\nconst ListMatches = ({Slide: {matches}, goToMessage, startNewChat}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {\r\n                matches.length === 0 ? (\r\n                    <div className={classes.emptyList}>\r\n                        <AssignmentIcon className={classes.notFoundIcon}/>\r\n                        <Typography variant=\"h6\">\r\n                            No matches\r\n                        </Typography>\r\n                    </div>\r\n                ) : (\r\n                    <Masonry\r\n                        className={classes.root}\r\n                        breakpointCols={breakpointColumnsObj}\r\n                        columnClassName={classes.columnClassName}\r\n                    >\r\n                        {\r\n                            matches.map(u => {\r\n                                console.log(u);\r\n                                const {age, first_name, img_url, userId} = u;\r\n                                return (\r\n                                    <Card key={userId} className={classes.partnerCard}>\r\n                                        <CardMedia\r\n                                            className={classes.partnerAvatar}\r\n                                            component={Image}\r\n                                            publicId={img_url}\r\n                                        />\r\n                                        <CardContent>\r\n                                            <Typography gutterBottom variant=\"body1\" component=\"h2\">\r\n                                                {first_name + \", \" + age}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions className={classes.buttons}>\r\n                                            <IconButton onClick={() => {\r\n                                                goToMessage();\r\n                                                startNewChat(userId);\r\n                                            }} aria-label={\"Message\"}>\r\n                                                <MessageIcon fontSize={\"large\"}/>\r\n                                            </IconButton>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Masonry>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {Slide: state.Slide};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        startNewChat: bindActionCreators(MessengerAction.startNewChat, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListMatches);","import React from 'react';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  &:focus,\r\n  &:hover,\r\n  &:visited,\r\n  &:link,\r\n  &:active {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport default props => <StyledLink {...props} />;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as SystemAction from '../../actions/System/System';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SlidePartner from \"../SlidePartner/SlidePartner\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport Messenger from \"../Messenger/Messenger\";\r\nimport ListMatches from \"../ListMatches/ListMatches\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport NewReleasesOutlinedIcon from '@material-ui/icons/NewReleasesOutlined';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport StyledLink from \"../StyledLink/StyledLink\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"98vh\"\r\n    },\r\n    blockWithMessengerAndListMatches: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    bottomNavigation: {\r\n        height: \"5vh\"\r\n    },\r\n    rootIsNotAuthorization: {\r\n        height: \"98vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    mainIcon: {\r\n        fontSize: \"18rem\"\r\n    }\r\n}));\r\n\r\nconst HomePage = ({User: {isAuthorization}, Messenger: {unReadMessage}}) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState('messages');\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <>\r\n            {\r\n                isAuthorization ? (<Grid container className={classes.root}>\r\n                    <Grid className={classes.blockWithMessengerAndListMatches} item xl={8} lg={8} md={8} sm={12} xs={12}>\r\n                        <BottomNavigation value={value} onChange={handleChange}>\r\n                            <BottomNavigationAction label=\"Messages\" value=\"messages\" icon={\r\n                                <Badge badgeContent={unReadMessage} color=\"secondary\">\r\n                                    <MessageIcon/>\r\n                                </Badge>\r\n                            }/>\r\n                            <BottomNavigationAction label=\"Matches\" value=\"matches\" icon={<FavoriteIcon/>}/>\r\n                        </BottomNavigation>\r\n                        {\r\n                            value === 'messages' ? <Messenger/> : <ListMatches goToMessage={()=>{\r\n                                setValue(\"messages\")\r\n                            }}/>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xl={4} lg={4} md={4} sm={12} xs={12}>\r\n                        <SlidePartner/>\r\n                    </Grid>\r\n                </Grid>) : (\r\n                    <Container className={classes.rootIsNotAuthorization}>\r\n                        <NewReleasesOutlinedIcon className={classes.mainIcon}/>\r\n                        <Typography variant=\"h6\">\r\n                            Welcome to my step project tinder =). To continue working,\r\n                            <StyledLink to={\"/sing-in\"}> sign in </StyledLink>\r\n                            to your account or go\r\n                            through the <StyledLink to={\"/sing-up\"}> sign up </StyledLink> process.\r\n                        </Typography>\r\n                    </Container>\r\n                )\r\n            }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        User: state.User,\r\n        Messenger: state.Messenger\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        startLoad: bindActionCreators(SystemAction.startLoad, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Link} from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: 12,\r\n    }\r\n});\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst ErrorPage = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    {\r\n                        _.isString(urlParams.get(\"error\")) ? (<>\r\n                            <Typography variant=\"h6\">\r\n                                Ops =) Something went Wrong!\r\n                            </Typography>\r\n                            <Typography variant=\"h4\">\r\n                                {urlParams.get(\"error\")}\r\n                            </Typography>\r\n                        </>) : (<>\r\n                            <Typography variant=\"h6\">\r\n                                Don't worry all is well.\r\n                            </Typography>\r\n                        </>)\r\n                    }\r\n\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button component={Link} to=\"/\" variant=\"contained\" color=\"primary\">\r\n                        Go home page\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","export default class Oauth {\r\n    static validateEmail = emailVal => {\r\n        // eslint-disable-next-line\r\n        let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(emailVal).toLowerCase());\r\n    }\r\n    static removeCookies = () => {\r\n        let res = document.cookie;\r\n        let multiple = res.split(\";\");\r\n        for (let i = 0; i < multiple.length; i++) {\r\n            let key = multiple[i].split(\"=\");\r\n            document.cookie = key[0] + \" =; expires = Thu, 01 Jan 1970 00:00:00 UTC\";\r\n        }\r\n    }\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nexport default class ServiceUserAPI {\r\n    static getUserDataBYJWT = () => axios.get(\"/api/v0/users\", {withCredentials: true}).then(res => res.data)\r\n    static signUpUser = data => axios.post(\"/api/v0/login\", data).then(res => res.data);\r\n    static signInUser = data => axios.put(\"/api/v0/login\", data).then(res => res.data);\r\n    static editUserData = data => axios.put(\"/api/v0/users\", data, {withCredentials: true}).then(res => res.data);\r\n    static changePassword = data => axios.put(\"/api/v0/users/password\", data, {withCredentials: true}).then(res => res.data);\r\n    static changeImgUser = data => axios.put(\"/api/v0/users/img\", data, {withCredentials: true}).then(res => res.data);\r\n}","import * as USER from '../../config/User';\r\nimport * as SYSTEM from '../../config/System';\r\nimport ServiceUserAPI from \"../../service/User\";\r\nimport _ from 'lodash';\r\nimport Cookie from 'js-cookie';\r\nimport * as NOTISTACK from \"../../config/Notistack\";\r\nimport * as SLIDE from \"../../config/Slide\";\r\nimport Oauth from \"../../util/Oauth\";\r\nimport SlideAPI from \"../../service/Slide\";\r\nimport {connect, disconnect} from '@giantmachines/redux-websocket';\r\n\r\nexport const getUserDataByJWT = () => dispatch => {\r\n    let oauth = Cookie.get(\"oauth\");\r\n    if (_.isString(oauth)) {\r\n        dispatch({\r\n            type: SYSTEM.START_LOAD\r\n        })\r\n        ServiceUserAPI.getUserDataBYJWT().then(res => {\r\n            dispatch({\r\n                type: USER.GET_USER_DATA_BY_JWT_SUCCESS,\r\n                payload: res\r\n            })\r\n\r\n\r\n            dispatch(connect(`ws://tinder.vashchenko.space:8080/api/v0/messages/${oauth}`))\r\n\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: \"Success get user's data\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            SlideAPI.getPackAccountForUser()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS,\r\n                        payload: {\r\n                            user: res,\r\n                            currentSlide: 0\r\n                        }\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_USERS_FOR_LIKE_FAILED\r\n                    })\r\n                    throw e;\r\n                })\r\n\r\n            SlideAPI.getUserMatch()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_MATCHES,\r\n                        payload: res\r\n                    })\r\n                })\r\n\r\n        }).catch(() => {\r\n            dispatch({\r\n                type: USER.GET_USER_DATA_BY_JET_FAILED\r\n            })\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: \"Error get user's data\"\r\n                    }\r\n                }\r\n            });\r\n        }).finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUpUser = (data, redirect) => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    })\r\n\r\n    ServiceUserAPI.signUpUser(data)\r\n        .then(res => {\r\n            const {jwt} = res;\r\n            document.cookie = \"oauth=\" + jwt;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: \"Success get jwt token\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            ServiceUserAPI.getUserDataBYJWT()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JWT_SUCCESS,\r\n                        payload: res\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                        notification: {\r\n                            ...{\r\n                                message: \"Success get user's data\"\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    dispatch(connect(`ws://tinder.vashchenko.space:8080/api/v0/messages/${jwt}`))\r\n\r\n                    SlideAPI.getPackAccountForUser()\r\n                        .then(res => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS,\r\n                                payload: {\r\n                                    user: res,\r\n                                    currentSlide: 0\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(e => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_USERS_FOR_LIKE_FAILED\r\n                            })\r\n                            throw e;\r\n                        })\r\n\r\n                    SlideAPI.getUserMatch()\r\n                        .then(res => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_MATCHES,\r\n                                payload: res\r\n                            })\r\n                        })\r\n\r\n                    redirect();\r\n\r\n                })\r\n                .catch(res => {\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JET_FAILED\r\n                    });\r\n                    dispatch({\r\n                        type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                        notification: {\r\n                            ...{\r\n                                message: \"Error get user's data \"\r\n                            }\r\n                        }\r\n                    });\r\n                    throw res;\r\n                })\r\n\r\n\r\n        })\r\n        .catch(e => {\r\n            const {response: {data: {message}}} = e;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        })\r\n}\r\n\r\nexport const signInUser = (data, redirect) => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    })\r\n    ServiceUserAPI.signInUser(data)\r\n        .then(res => {\r\n            const {jwt} = res;\r\n            document.cookie = \"oauth=\" + jwt;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: \"Success get jwt token\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            ServiceUserAPI.getUserDataBYJWT()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                        notification: {\r\n                            ...{\r\n                                message: \"Success get user's data\"\r\n                            }\r\n                        }\r\n                    });\r\n                    dispatch(connect(`ws://tinder.vashchenko.space:8080/api/v0/messages/${jwt}`))\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JWT_SUCCESS,\r\n                        payload: res\r\n                    })\r\n\r\n                    SlideAPI.getPackAccountForUser()\r\n                        .then(res => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS,\r\n                                payload: {\r\n                                    user: res,\r\n                                    currentSlide: 0\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(e => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_USERS_FOR_LIKE_FAILED\r\n                            })\r\n                            throw e;\r\n                        })\r\n\r\n                    SlideAPI.getUserMatch()\r\n                        .then(res => {\r\n                            dispatch({\r\n                                type: SLIDE.LOAD_MATCHES,\r\n                                payload: res\r\n                            })\r\n                        })\r\n\r\n                    redirect();\r\n                })\r\n                .catch(res => {\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JET_FAILED\r\n                    });\r\n                    dispatch({\r\n                        type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                        notification: {\r\n                            ...{\r\n                                message: \"Error get user's data\"\r\n                            }\r\n                        }\r\n                    });\r\n                    throw res;\r\n                })\r\n        })\r\n        .catch(e => {\r\n            const {response: {data: {message}}} = e;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        })\r\n}\r\n\r\nexport const SignOut = () => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    });\r\n    dispatch({\r\n        type: USER.SIGN_OUT\r\n    });\r\n    dispatch({\r\n        type: SLIDE.SIGN_OUT\r\n    })\r\n    dispatch(disconnect());\r\n    Oauth.removeCookies();\r\n    dispatch({\r\n        type: SYSTEM.STOP_LOAD\r\n    });\r\n}\r\n\r\nexport const editData = data => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    });\r\n\r\n    ServiceUserAPI.editUserData(data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: USER.EDIT_USER_DATA,\r\n                payload: res\r\n            })\r\n\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: \"Success change user data\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            SlideAPI.getPackAccountForUser()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_USERS_FOR_LIKE_SUCCESS,\r\n                        payload: {\r\n                            user: res,\r\n                            currentSlide: 0\r\n                        }\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_USERS_FOR_LIKE_FAILED\r\n                    })\r\n                    throw e;\r\n                })\r\n\r\n            SlideAPI.getUserMatch()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_MATCHES,\r\n                        payload: res\r\n                    })\r\n                })\r\n        })\r\n        .catch(e => {\r\n            const {response: {data: {message}}} = e;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        });\r\n};\r\n\r\nexport const changePassword = data => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    });\r\n\r\n    ServiceUserAPI.changePassword(data)\r\n        .then(res => {\r\n            const {message} = res;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .catch(e => {\r\n            const {response: {data: {message}}} = e;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        })\r\n};\r\n\r\nexport const changeImg = data => dispatch => {\r\n    dispatch({\r\n        type: SYSTEM.START_LOAD\r\n    });\r\n\r\n    ServiceUserAPI.changeImgUser(data)\r\n        .then(res => {\r\n            const {message} = res;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n            ServiceUserAPI.getUserDataBYJWT()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JWT_SUCCESS,\r\n                        payload: res\r\n                    })\r\n                })\r\n                .catch(res => {\r\n                    dispatch({\r\n                        type: USER.GET_USER_DATA_BY_JET_FAILED\r\n                    });\r\n                    throw res;\r\n                })\r\n            SlideAPI.getUserMatch()\r\n                .then(res => {\r\n                    dispatch({\r\n                        type: SLIDE.LOAD_MATCHES,\r\n                        payload: res\r\n                    })\r\n                })\r\n\r\n        })\r\n        .catch(e => {\r\n            const {response: {data: {message}}} = e;\r\n            dispatch({\r\n                type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n                notification: {\r\n                    ...{\r\n                        message: message\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: SYSTEM.STOP_LOAD\r\n            })\r\n        })\r\n}","import React, {useState} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Oauth from '../../util/Oauth';\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport * as SystemAction from \"../../actions/System/System\";\r\nimport _ from 'lodash';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport * as UserAction from \"../../actions/User/User\";\r\nimport {objectToFormData} from 'object-to-formdata';\r\n\r\nconst useStyles = makeStyles({\r\n    container:{\r\n        height:\"90vh\",\r\n    },\r\n    root: {\r\n        margin: \"12px auto\",\r\n        maxWidth: \"478px\",\r\n        padding: \"24px\"\r\n    },\r\n    googleButton: {\r\n        marginTop: 15,\r\n        textDecoration: \"none\"\r\n    },\r\n    formSingIn: {\r\n        marginTop: 15\r\n    },\r\n    formControl: {\r\n        margin: \"15px 0\"\r\n    }\r\n});\r\n\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst SingIn = ({startLoad, signInUser, history}) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [emailError, setEmailError] = useState(false);\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const validateEmail = Oauth.validateEmail;\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    }\r\n\r\n    const handleMouseDownPassword = e => e.preventDefault();\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        let validEmail = validateEmail(email);\r\n        if (!validEmail) {\r\n            setEmailError(true);\r\n        }\r\n        let validPassword = password.length > 4;\r\n        if (!validPassword) {\r\n            setPasswordError(true);\r\n        }\r\n        if (validPassword && validEmail) {\r\n            const options = {\r\n                indices: true,\r\n                nullsAsUndefineds: true\r\n            };\r\n            const formData = objectToFormData({\r\n                email: email,\r\n                password: password\r\n            }, options);\r\n\r\n            signInUser(formData, ()=>{\r\n                history.push(\"/\")\r\n            });\r\n        }\r\n    };\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {_.isString(urlParams.get(\"message\")) && <Typography align={'center'} variant=\"h6\" color={\"secondary\"}>\r\n                {urlParams.get(\"message\")}\r\n            </Typography>}\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"}>\r\n                        Sing in your account\r\n                    </Typography>\r\n                    <Button onClick={startLoad} className={classes.googleButton} component={Link} fullWidth={true}\r\n                            href={'https://accounts.google.com/o/oauth2/auth?scope=email&response_type=code&access_type=offline&redirect_uri=http://tinder.vashchenko.space:8080/api/v0/google-sign-in&client_id=206183164477-qeh7n71mhlf4au9f236fc1i8tr62r080.apps.googleusercontent.com'}\r\n                            variant=\"contained\" color=\"primary\">\r\n                        Sing In with Google\r\n                    </Button>\r\n                    <form onSubmit={onSubmit} className={classes.formSingUp} noValidate={false} autoComplete=\"off\">\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={emailError}>\r\n                            <InputLabel htmlFor={\"enter-email\"}>Enter email</InputLabel>\r\n                            <Input\r\n                                id={\"enter-email\"}\r\n                                value={email}\r\n                                onChange={e => {\r\n                                    setEmail(e.target.value);\r\n                                    setEmailError(false)\r\n                                }}\r\n                                aria-describedby={\"enter-email-helper\"}\r\n                            />\r\n                            <FormHelperText\r\n                                id={\"enter-email-helper\"}>{emailError && \"Email is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={passwordError}>\r\n                            <InputLabel htmlFor={\"enter-password\"}>Enter password</InputLabel>\r\n                            <Input\r\n                                id={\"enter-password\"}\r\n                                value={password}\r\n                                onChange={e => {\r\n                                    setPassword(e.target.value);\r\n                                    setPasswordError(false)\r\n                                }}\r\n                                aria-describedby={\"enter-password-helper\"}\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                        >\r\n                                            {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            <FormHelperText\r\n                                id={\"enter-password-helper\"}>{passwordError && \"Password is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <Button type={\"submit\"} fullWidth={true} variant=\"contained\" color=\"primary\">Sing In</Button>\r\n                    </form>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        startLoad: bindActionCreators(SystemAction.startLoad, dispatch),\r\n        signInUser: bindActionCreators(UserAction.signInUser, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(SingIn);","import React, {useState} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from '@material-ui/core/Link';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport ImageUploader from 'react-images-upload';\r\nimport Oauth from '../../util/Oauth';\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as UserAction from \"../../actions/User/User.js\";\r\nimport {connect} from \"react-redux\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport {objectToFormData} from 'object-to-formdata';\r\nimport * as SystemAction from \"../../actions/System/System\";\r\n\r\nconst useStyles = makeStyles({\r\n    container:{\r\n        height:\"90vh\",\r\n    },\r\n    root: {\r\n        margin: \"12px auto\",\r\n        maxWidth: \"478px\",\r\n        padding: \"24px\"\r\n    },\r\n    googleButton: {\r\n        marginTop: 15,\r\n        textDecoration: \"none\"\r\n    },\r\n    formSingUp: {\r\n        marginTop: 15\r\n    },\r\n    formControl: {\r\n        margin: \"15px 0\"\r\n    }\r\n});\r\n\r\nconst SingUp = ({signUpUser, startLoad, history}) => {\r\n    const classes = useStyles();\r\n    const [name, setName] = useState(\"\");\r\n    const [nameError, setNameError] = useState(false);\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [emailError, setEmailError] = useState(false);\r\n\r\n    const [pictures, setPictures] = useState([]);\r\n    const [errorPictures, setErrorPictures] = useState(false)\r\n\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordError, setPasswordError] = useState(false);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const handleMouseDownPassword = e => e.preventDefault();\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    }\r\n\r\n    const validateEmail = Oauth.validateEmail;\r\n    const onDrop = (pictureFiles) => {\r\n        setPictures(pictureFiles);\r\n        setErrorPictures(false);\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        let validEmail = validateEmail(email);\r\n        if (!validEmail) {\r\n            setEmailError(true);\r\n        }\r\n        let validName = name.length > 4\r\n        if (!validName) {\r\n            setNameError(true);\r\n        }\r\n        let validPicture = pictures.length === 1;\r\n        if (!validPicture) {\r\n            setErrorPictures(true);\r\n        }\r\n        let validPassword = password.length > 4;\r\n        if (!validPassword) {\r\n            setPasswordError(true);\r\n        }\r\n        if (validPicture && validName && validEmail && validPassword) {\r\n            const options = {\r\n                indices: true,\r\n                nullsAsUndefineds: true\r\n            };\r\n            const formData = objectToFormData({\r\n                email: email,\r\n                password: password,\r\n                firstName: name,\r\n                img: pictures[0]\r\n            }, options);\r\n\r\n            signUpUser(formData, () => {\r\n                history.push(\"/\")\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <Container className={classes.container}>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"}>\r\n                        Create your account\r\n                    </Typography>\r\n                    <Button onClick={startLoad} className={classes.googleButton} component={Link} fullWidth={true}\r\n                            href={'https://accounts.google.com/o/oauth2/auth?scope=profile email&response_type=code&access_type=offline&redirect_uri=http://tinder.vashchenko.space:8080/api/v0/google-sign-up&client_id=206183164477-qeh7n71mhlf4au9f236fc1i8tr62r080.apps.googleusercontent.com'}\r\n                            variant=\"contained\" color=\"primary\">\r\n                        Sing Up with Google\r\n                    </Button>\r\n                    <form onSubmit={onSubmit} className={classes.formSingUp} noValidate={false} autoComplete=\"off\">\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={emailError}>\r\n                            <InputLabel htmlFor={\"enter-email\"}>Enter email</InputLabel>\r\n                            <Input\r\n\r\n                                id={\"enter-email\"}\r\n                                value={email}\r\n                                onChange={e => {\r\n                                    setEmail(e.target.value);\r\n                                    setEmailError(false)\r\n                                }}\r\n                                aria-describedby={\"enter-email-helper\"}\r\n                            />\r\n                            <FormHelperText\r\n                                id={\"enter-email-helper\"}>{emailError && \"Email is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={nameError}>\r\n                            <InputLabel htmlFor={\"enter-name\"}>Enter name</InputLabel>\r\n                            <Input\r\n\r\n                                id={\"enter-name\"}\r\n                                value={name}\r\n                                onChange={e => {\r\n                                    setName(e.target.value);\r\n                                    setNameError(false)\r\n                                }}\r\n                                aria-describedby={\"enter-name-helper\"}\r\n                            />\r\n                            <FormHelperText id={\"enter-name-helper\"}>{nameError && \"Name is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={errorPictures}>\r\n                            <ImageUploader\r\n                                withPreview={true}\r\n                                withIcon={true}\r\n                                buttonText='Choose avatar'\r\n                                fileSizeError={\"File size is too big\"}\r\n                                fileTypeError={\"Is not supported file extension\"}\r\n                                onChange={onDrop}\r\n                                imgExtension={['.jpg', '.png', '.gif']}\r\n                                maxFileSize={9242880}\r\n                                singleImage={true}\r\n                            />\r\n                            <FormHelperText\r\n                                id={\"enter-name-helper\"}>{errorPictures && \"Avatar is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                     error={passwordError}>\r\n                            <InputLabel htmlFor={\"enter-password\"}>Enter password</InputLabel>\r\n                            <Input\r\n                                id={\"enter-password\"}\r\n                                value={password}\r\n                                onChange={e => {\r\n                                    setPassword(e.target.value);\r\n                                    setPasswordError(false)\r\n                                }}\r\n                                aria-describedby={\"enter-password-helper\"}\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                        >\r\n                                            {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            <FormHelperText\r\n                                id={\"enter-password-helper\"}>{passwordError && \"Password is require\"}</FormHelperText>\r\n                        </FormControl>\r\n                        <Button type={\"submit\"} fullWidth={true} variant=\"contained\" color=\"primary\">Sing Up</Button>\r\n                    </form>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        startLoad: bindActionCreators(SystemAction.startLoad, dispatch),\r\n        signUpUser: bindActionCreators(UserAction.signUpUser, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(SingUp);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PrivateRoute = ({ component: Component, User:{isAuthorization}, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => (\r\n                isAuthorization\r\n                    ? <Component {...props} />\r\n                    : <Redirect to=\"/\" />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state)=> {\r\n    return { User: state.User };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(PrivateRoute);\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\nimport {connect} from \"react-redux\";\r\nimport _ from 'lodash';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as UserAction from \"../../actions/User/User\";\r\nimport {objectToFormData} from 'object-to-formdata';\r\nimport {Image} from \"cloudinary-react\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: \"10px\"\r\n    },\r\n    card: {\r\n        padding: \"15px\",\r\n        margin: 10\r\n    },\r\n    formControl: {\r\n        margin: \"15px 0\"\r\n    },\r\n    userAvatar: {\r\n        marginTop: \"25px\",\r\n        width:\"100%\",\r\n        height:\"auto\"\r\n    }\r\n});\r\n\r\n\r\nconst PersonalCabinet = ({User: {first_name, age, interests, gender, genderpartner, aboutMe, max_distance, min_age, max_age, imagesList}, editData, changePassword, changeImg}) => {\r\n    const classes = useStyles();\r\n    const [newFirstName, setNewFirstName] = useState(first_name);\r\n    const [nameError, setNameError] = useState(false);\r\n    const [newAge, setNewAge] = useState((_.isNull(age) || age < 18) ? 18 : age);\r\n    const [newInterests, setNewInterests] = useState(_.isNull(interests) ? \"\" : interests);\r\n    const [newGander, setNewGander] = useState(_.isNull(gender) ? \"male\" : gender);\r\n    const [newGanderPartner, setNewGanderPartner] = useState(_.isNull(genderpartner) ? \"male\" : genderpartner);\r\n    const [newAboutMe, setNewAboutMe] = useState(_.isNull(aboutMe) ? \"\" : aboutMe);\r\n    const [newMaxDistance, setNewMaxDistance] = useState(_.isNull(max_distance) ? \"\" : max_distance);\r\n    const [newMinAge, setNewMinAge] = useState(_.isNull(min_age) ? \"\" : min_age);\r\n    const [newMaxAge, setNewMaxAge] = useState(_.isNull(max_age) ? \"\" : max_age);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    const [pictures, setPictures] = useState([]);\r\n    const [errorPictures, setErrorPictures] = useState(false)\r\n\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [newPasswordError, setNewPasswordError] = useState(false);\r\n    const [showNewPassword, setShowNewPassword] = useState(false);\r\n\r\n\r\n    const handleMouseDownPassword = e => e.preventDefault();\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    }\r\n\r\n    const handleClickShowNewPassword = () => {\r\n        setShowNewPassword(!showNewPassword);\r\n    }\r\n\r\n    const onDrop = (pictureFiles) => {\r\n        setPictures(pictureFiles);\r\n        setErrorPictures(false);\r\n    }\r\n\r\n    const onSubmitImg = e => {\r\n        e.preventDefault();\r\n\r\n        const options = {\r\n            indices: true,\r\n            nullsAsUndefineds: true\r\n        };\r\n        const formData = objectToFormData({\r\n            img: pictures[0],\r\n            publicId: imagesList[0]\r\n        }, options);\r\n\r\n\r\n        changeImg(formData);\r\n        setPictures([]);\r\n    }\r\n    const onSubmitPassword = e => {\r\n        e.preventDefault();\r\n        changePassword({\r\n            currentPassword: password,\r\n            newPassword: newPassword\r\n        })\r\n    }\r\n    const onSubmitPersonalData = e => {\r\n        e.preventDefault();\r\n        editData({\r\n            first_name: newFirstName,\r\n            age: newAge,\r\n            interests: newInterests,\r\n            gender: newGander,\r\n            genderpartner: newGanderPartner,\r\n            aboutme: newAboutMe,\r\n            max_distance: newMaxDistance,\r\n            min_age: newMinAge,\r\n            max_age: newMaxAge\r\n        })\r\n    }\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xl={8} lg={8} md={8} sm={12} xs={12}>\r\n                    <Card className={classes.card}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h5\"}>\r\n                                Edit personal data\r\n                            </Typography>\r\n                            <form onSubmit={onSubmitPersonalData} noValidate={false} autoComplete=\"off\">\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xl={3} lg={3} md={3} sm={3} xs={12}>\r\n                                        {imagesList.length > 0 &&\r\n                                            <Image className={classes.userAvatar} publicId={imagesList[0]}/>\r\n                                       }\r\n                                    </Grid>\r\n                                    <Grid item xl={9} lg={9} md={9} sm={9} xs={12}>\r\n                                        <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                                     error={nameError}>\r\n                                            <TextField\r\n                                                label={\"Enter new name\"}\r\n                                                id={\"enter-name\"}\r\n                                                value={newFirstName}\r\n                                                onChange={e => {\r\n                                                    setNewFirstName(e.target.value);\r\n                                                    setNameError(false)\r\n                                                }}\r\n                                                aria-describedby={\"enter-name-helper\"}\r\n                                            />\r\n                                            <FormHelperText\r\n                                                id={\"enter-name-helper\"}>{nameError && \"Name is require\"}</FormHelperText>\r\n                                        </FormControl>\r\n                                        <FormControl className={classes.formControl} fullWidth={true}>\r\n                                            <TextField\r\n                                                label={\"Enter new interest\"}\r\n                                                id=\"enter-interest\"\r\n                                                multiline\r\n                                                value={newInterests}\r\n                                                onChange={e => setNewInterests(e.target.value)}\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormControl className={classes.formControl} fullWidth={true}>\r\n                                            <TextField\r\n                                                label={\"Enter new about you\"}\r\n                                                id=\"enter-about-me\"\r\n                                                multiline\r\n                                                value={newAboutMe}\r\n                                                onChange={e => setNewAboutMe(e.target.value)}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <FormControl component=\"fieldset\" className={classes.formControl} fullWidth={true}>\r\n                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                    <RadioGroup aria-label=\"gender\" name=\"gender1\" value={newGander}\r\n                                                onChange={e => setNewGander(e.target.value)}>\r\n                                        <FormControlLabel value=\"female\" control={<Radio/>} label=\"Female\"/>\r\n                                        <FormControlLabel value=\"male\" control={<Radio/>} label=\"Male\"/>\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                                <FormControl component=\"fieldset\" className={classes.formControl} fullWidth={true}>\r\n                                    <FormLabel component=\"legend\">Gender your partner</FormLabel>\r\n                                    <RadioGroup aria-label=\"gender\" name=\"gender1\" value={newGanderPartner}\r\n                                                onChange={e => setNewGanderPartner(e.target.value)}>\r\n                                        <FormControlLabel value=\"female\" control={<Radio/>} label=\"Female\"/>\r\n                                        <FormControlLabel value=\"male\" control={<Radio/>} label=\"Male\"/>\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                                <FormControl className={classes.formControl} fullWidth={true}>\r\n                                    <FormLabel component=\"legend\">Your age</FormLabel>\r\n                                    <Slider\r\n                                        value={newAge}\r\n                                        onChange={(e, a) => setNewAge(a)}\r\n                                        aria-labelledby=\"continuous-slider\"\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={18}\r\n                                        max={100}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl className={classes.formControl} fullWidth={true}>\r\n                                    <FormLabel component=\"legend\">New max distance</FormLabel>\r\n                                    <Slider\r\n                                        value={newMaxDistance}\r\n                                        onChange={(e, a) => setNewMaxDistance(a)}\r\n                                        aria-labelledby=\"continuous-slider\"\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={1}\r\n                                        max={60}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl className={classes.formControl} fullWidth={true}>\r\n                                    <FormLabel component=\"legend\">New min max age your partner</FormLabel>\r\n                                    <Slider\r\n                                        value={[newMinAge, newMaxAge]}\r\n                                        onChange={(e, a) => {\r\n                                            setNewMaxAge(_.max(a));\r\n                                            setNewMinAge(_.min(a))\r\n                                        }}\r\n                                        aria-labelledby=\"continuous-slider\"\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={18}\r\n                                        max={100}\r\n                                    />\r\n                                </FormControl>\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    fullWidth={true}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >Edit Personal Data</Button>\r\n                            </form>\r\n                        </CardContent>\r\n                    </Card>\r\n                    <Card className={classes.card}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h5\"}>\r\n                                Change password\r\n                            </Typography>\r\n                            <form onSubmit={onSubmitPassword} noValidate={false} autoComplete=\"off\">\r\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                             error={passwordError}>\r\n                                    <InputLabel htmlFor={\"enter-password\"}>Enter current password</InputLabel>\r\n                                    <Input\r\n                                        id={\"enter-password\"}\r\n                                        value={password}\r\n                                        onChange={e => {\r\n                                            setPassword(e.target.value);\r\n                                            setPasswordError(false)\r\n                                        }}\r\n                                        aria-describedby={\"enter-password-helper\"}\r\n                                        type={showPassword ? 'text' : 'password'}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowPassword}\r\n                                                    onMouseDown={handleMouseDownPassword}\r\n                                                >\r\n                                                    {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                    <FormHelperText\r\n                                        id={\"enter-password-helper\"}>{passwordError && \"Current password is require\"}</FormHelperText>\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth={true}\r\n                                             error={newPasswordError}>\r\n                                    <InputLabel htmlFor={\"enter-new-password\"}>Enter new password</InputLabel>\r\n                                    <Input\r\n                                        id={\"enter-new-password\"}\r\n                                        value={newPassword}\r\n                                        onChange={e => {\r\n                                            setNewPassword(e.target.value);\r\n                                            setNewPasswordError(false)\r\n                                        }}\r\n                                        aria-describedby={\"enter-password-helper\"}\r\n                                        type={showNewPassword ? 'text' : 'password'}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowNewPassword}\r\n                                                    onMouseDown={handleMouseDownPassword}\r\n                                                >\r\n                                                    {showNewPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                    <FormHelperText\r\n                                        id={\"enter-password-helper\"}>{newPasswordError && \"Current password is require\"}</FormHelperText>\r\n                                </FormControl>\r\n                                <Button type={\"submit\"} fullWidth={true} variant=\"contained\" color=\"primary\">Change\r\n                                    password</Button>\r\n                            </form>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xl={4} lg={4} md={4} sm={12} xs={12}>\r\n                    <Card className={classes.card}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h5\"}>\r\n                                Change your photo\r\n                            </Typography>\r\n                            <form onSubmit={onSubmitImg} noValidate={false} autoComplete=\"off\">\r\n                                <FormControl className={classes.formControl} variant=\"outlined\" fullWidth={true}\r\n                                             error={errorPictures}>\r\n                                    <ImageUploader\r\n                                        withPreview={true}\r\n                                        withIcon={true}\r\n                                        buttonText='Choose avatar'\r\n                                        fileSizeError={\"File size is too big\"}\r\n                                        fileTypeError={\"Is not supported file extension\"}\r\n                                        onChange={onDrop}\r\n                                        imgExtension={['.jpg', '.png', '.gif']}\r\n                                        maxFileSize={9242880}\r\n                                        singleImage={true}\r\n                                    />\r\n                                    <FormHelperText\r\n                                        id={\"enter-name-helper\"}>{errorPictures && \"Avatar is require\"}</FormHelperText>\r\n                                </FormControl>\r\n                                <Button type={\"submit\"} fullWidth={true} variant=\"contained\" color=\"primary\">Change\r\n                                    photo</Button>\r\n                            </form>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {User: state.User};\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        editData: bindActionCreators(UserAction.editData, dispatch),\r\n        changePassword: bindActionCreators(UserAction.changePassword, dispatch),\r\n        changeImg: bindActionCreators(UserAction.changeImg, dispatch),\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonalCabinet);\r\n","import React from 'react';\r\nimport {Route} from \"react-router-dom\";\r\nimport HomePage from \"../HomePage/HomePage\";\r\nimport ErrorPage from \"../ErrorPage/ErrorPage\";\r\nimport SingIn from \"../SingIn/SingIn\";\r\nimport SingUp from \"../SingUp/SingUp\";\r\nimport PrivateRoute from \"./PrivateRoute/PrivateRoute\";\r\nimport PersonalCabinet from \"../PersonalCabinet/PersonalCabinet\";\r\nimport ListMatches from \"../ListMatches/ListMatches\";\r\nimport Messenger from \"../Messenger/Messenger\";\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <>\r\n            <Route exact path={\"/\"} component={HomePage}/>\r\n            <Route exact path={\"/error\"} component={ErrorPage}/>\r\n            <Route exact path={\"/sing-in\"} component={SingIn}/>\r\n            <Route exact path={\"/sing-up\"} component={SingUp}/>\r\n            <PrivateRoute exact path={\"/personal-cabinet\"} component={PersonalCabinet}/>\r\n            <PrivateRoute exact path={\"/matches\"} component={ListMatches}/>\r\n            <PrivateRoute exact path={\"/messenger\"} component={Messenger}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Routing;","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport StyledLink from \"../StyledLink/StyledLink\";\r\nimport {connect} from \"react-redux\";\r\nimport * as UserAction from '../../actions/User/User'\r\nimport {bindActionCreators} from \"redux\";\r\nimport _ from 'lodash';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {Link} from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {Image} from 'cloudinary-react';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n        height: \"8vh\",\r\n    },\r\n    heightBar: {\r\n        height: \"8vh\",\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        display: 'block',\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    mainLink: {\r\n        color: \"white\"\r\n    },\r\n    signOut: {\r\n        color: \"white\",\r\n        marginLeft: \"10px\"\r\n    },\r\n    avatar: {\r\n        objectFit: \"cover\"\r\n    }\r\n}));\r\n\r\nconst Header = ({User: {isAuthorization, imagesList}, getUserDataByJWT, SignOut, Messenger:{unReadMessage}}) => {\r\n    useEffect(() => {\r\n        if (_.isString(urlParams.get(\"oauth\"))) {\r\n            document.cookie = \"oauth=\" + urlParams.get(\"oauth\");\r\n        }\r\n        getUserDataByJWT()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    const classes = useStyles();\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n    };\r\n    const handleMobileMenuOpen = (event) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            {\r\n                isAuthorization ?\r\n                    (\r\n                        [\r\n                            <MenuItem component={Link}\r\n                                      to=\"/personal-cabinet\" key={\"profile\"}>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"primary-search-account-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    {imagesList.length > 0 ? <Avatar className={classes.avatar} component={Image}\r\n                                                                     publicId={imagesList[0]}/> :\r\n                                        <AccountCircle/>}\r\n                                </IconButton>\r\n                                <p>Profile</p>\r\n                            </MenuItem>,\r\n                            <MenuItem component={Link}\r\n                                      to=\"/messenger\" key={\"messages\"}>\r\n                                <IconButton aria-label=\"show new mails\" color=\"inherit\">\r\n                                    <Badge badgeContent={unReadMessage} color=\"secondary\">\r\n                                        <MailIcon/>\r\n                                    </Badge>\r\n                                </IconButton>\r\n                                <p>Messages</p>\r\n                            </MenuItem>,\r\n                            <MenuItem component={Link}\r\n                                      to=\"/matches\" key={\"matches\"}>\r\n                                <IconButton aria-label=\"show new mails\" color=\"inherit\">\r\n                                    <FavoriteIcon/>\r\n                                </IconButton>\r\n                                <p>Matches</p>\r\n                            </MenuItem>,\r\n                            <MenuItem onClick={SignOut} key={\"sign-out\"}>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"primary-search-account-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <ExitToAppIcon/>\r\n                                </IconButton>\r\n                                <p>Sign out</p>\r\n                            </MenuItem>\r\n                        ]\r\n                    ) :\r\n                    (\r\n                        [\r\n                            <MenuItem\r\n                                component={Link}\r\n                                to=\"/sing-in\"\r\n                                key={\"sign-in\"}>\r\n                                <IconButton\r\n\r\n                                    aria-label=\"show new mails\"\r\n                                    color=\"inherit\">\r\n\r\n                                    <ExitToAppIcon/>\r\n                                </IconButton>\r\n                                <p>Sign In</p>\r\n                            </MenuItem>,\r\n                            <MenuItem\r\n                                component={Link}\r\n                                to=\"/sing-up\"\r\n                                key={\"sign-up\"}>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"primary-search-account-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <AddIcon/>\r\n                                </IconButton>\r\n                                <p>Sign Up</p>\r\n                            </MenuItem>\r\n                        ]\r\n                    )\r\n            }\r\n\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar className={classes.heightBar} position=\"static\">\r\n                <Toolbar className={classes.heightBar}>\r\n                    <Avatar variant={\"square\"} alt={\"Icon\"} src={\"/favicon.ico\"}/>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        <StyledLink className={classes.mainLink} to={\"/\"}>\r\n                            Step project tinder\r\n                        </StyledLink>\r\n                    </Typography>\r\n                    <div className={classes.grow}/>\r\n                    <div className={classes.sectionDesktop}>\r\n                        {\r\n                            isAuthorization ? (\r\n                                <>\r\n                                    <IconButton\r\n                                        component={Link}\r\n                                        to=\"/personal-cabinet\"\r\n                                        edge=\"end\"\r\n                                        aria-label=\"account of current user\"\r\n                                        aria-haspopup=\"true\"\r\n                                        color=\"inherit\"\r\n                                    >\r\n                                        {imagesList.length > 0 ? <Avatar className={classes.avatar} component={Image}\r\n                                                                         publicId={imagesList[0]}/> :\r\n                                            <AccountCircle/>}\r\n                                    </IconButton>\r\n                                    <Button onClick={SignOut} className={classes.signOut}>\r\n                                        <Typography variant=\"button\">\r\n                                            Sign out\r\n                                        </Typography>\r\n                                    </Button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Typography variant=\"button\">\r\n                                        <StyledLink className={classes.mainLink} to={\"/sing-in\"}>Sign In</StyledLink>\r\n                                    </Typography>\r\n                                    <Typography style={{marginLeft: \"12px\"}} variant=\"button\">\r\n                                        <StyledLink className={classes.mainLink} to={\"/sing-up\"}>Sign Up</StyledLink>\r\n                                    </Typography>\r\n                                </>\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        User: state.User,\r\n        Messenger: state.Messenger\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getUserDataByJWT: bindActionCreators(UserAction.getUserDataByJWT, dispatch),\r\n        SignOut: bindActionCreators(UserAction.SignOut, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from '../../actions/Notistack/Notistack';\r\n\r\nlet displayed = [];\r\n\r\nconst Notifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifications = useSelector(store => {\r\n        return store.Notistack.notifications;\r\n    });\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = id => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = id => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            if (displayed.includes(key)) return;\r\n\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                }\r\n            });\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Notifier;","import * as NOTISTACK from '../../config/Notistack';\r\n\r\nexport const enqueueSnackbar = notification => {\r\n    const key = notification.options && notification.options.key;\r\n\r\n    return {\r\n        type: NOTISTACK.ENQUEUE_SNACKBAR,\r\n        notification: {\r\n            ...notification,\r\n            key: key || new Date().getTime() + Math.random()\r\n        }\r\n    };\r\n};\r\n\r\nexport const closeSnackbar = key => ({\r\n    type: NOTISTACK.CLOSE_SNACKBAR,\r\n    dismissAll: !key,\r\n    key\r\n});\r\n\r\nexport const removeSnackbar = key => ({\r\n    type: NOTISTACK.REMOVE_SNACKBAR,\r\n    key\r\n});","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles({\r\n    \"backDrop\":{\r\n        \"zIndex\":\"100\"\r\n    }\r\n});\r\n\r\n\r\nconst Loader = ({System: {load}}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Backdrop className={classes.backDrop} open={load}>\r\n            <CircularProgress color={\"inherit\"}/>\r\n        </Backdrop>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {System: state.System};\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(Loader);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport {pink} from '@material-ui/core/colors';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter, Switch} from 'react-router-dom';\nimport configureStore from './store/index';\nimport './index.css';\nimport Routing from \"./components/Routing/Routing\";\nimport Header from \"./components/Header/Header\";\nimport {SnackbarProvider} from 'notistack';\nimport Notifier from \"./components/Notifier/Notifier\";\nimport Loader from \"./components/Loader/Loader\";\nimport {CloudinaryContext} from \"cloudinary-react\";\nimport 'react-chat-elements/dist/main.css';\n\nconst outerTheme = createMuiTheme({\n    palette: {\n        secondary: pink,\n        primary: pink\n    },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={outerTheme}>\n        <Provider store={configureStore()}>\n            <CloudinaryContext className={\"CloudinaryContext\"} cloudName={\"dxge5r7h2\"}>\n                <SnackbarProvider>\n                    <BrowserRouter>\n                        <Header/>\n                        <Switch>\n                            <Routing/>\n                        </Switch>\n                        <Notifier/>\n                        <Loader/>\n                    </BrowserRouter>\n                </SnackbarProvider>\n            </CloudinaryContext>\n        </Provider>\n    </ThemeProvider>\n    ,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}